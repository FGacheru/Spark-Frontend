{"version":3,"mappings":"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","names":["AuthRoutes","path","component","_signin_signin_component__WEBPACK_IMPORTED_MODULE_3__","_forgot_forgot_component__WEBPACK_IMPORTED_MODULE_0__","_reset_reset_component__WEBPACK_IMPORTED_MODULE_2__","_lock_screen_lock_screen_component__WEBPACK_IMPORTED_MODULE_1__","AuthenticationModule","_angular_common__WEBPACK_IMPORTED_MODULE_6__","_angular_router__WEBPACK_IMPORTED_MODULE_7__","_authentication_routing_module__WEBPACK_IMPORTED_MODULE_0__","_angular_forms__WEBPACK_IMPORTED_MODULE_8__","_core_module__WEBPACK_IMPORTED_MODULE_1__","declarations","_forgot_forgot_component__WEBPACK_IMPORTED_MODULE_2__","_reset_reset_component__WEBPACK_IMPORTED_MODULE_4__","imports","_angular_core__WEBPACK_IMPORTED_MODULE_1__","ForgotComponent","_authService","formBuilder","forgotPasswordForm","group","email","_angular_forms__WEBPACK_IMPORTED_MODULE_2__","console","log","controls","error","submitted","loading","invalid","forgotPassword","value","subscribe","res","detail","errorMessage","reset","selectors","decls","vars","consts","template","ctx","_angular_core__WEBPACK_IMPORTED_MODULE_3__","ResetComponent","resetPasswordForm","_angular_forms__WEBPACK_IMPORTED_MODULE_4__","password","hasNumber","hasCapitalCase","hasSmallCase","hasSpecialCharacters","confirm_password","validator","resetPassowrd","togglePasswordShow","passwordType","toggleShowPassword","SigninComponent","_route","_storageService","signinForm","username","remember_me","hasError","signIn","pipe","non_field_errors","e","MustMatch","controlName","matchingControlName","formGroup","control","matchingControl","errors","mustMatch","setErrors","PasswordValidator","regex","valid","test"],"sources":["webpack:///src/app/core/authentication/authentication-routing.module.ts","webpack:///src/app/core/authentication/authentication.module.ts","webpack:///src/app/core/authentication/forgot/forgot.component.html","webpack:///src/app/core/authentication/forgot/forgot.component.ts","webpack:///src/app/core/authentication/reset/reset.component.html","webpack:///src/app/core/authentication/reset/reset.component.ts","webpack:///src/app/core/authentication/signin/signin.component.html","webpack:///src/app/core/authentication/signin/signin.component.ts","webpack:///src/app/core/helpers/must-match.ts","webpack:///src/app/core/helpers/password-validator.ts"],"sourcesContent":["import { Routes } from '@angular/router';\n\nimport { ForgotComponent } from './forgot/forgot.component';\nimport { LockScreenComponent } from './lock-screen/lock-screen.component';\nimport { ResetComponent } from './reset/reset.component';\nimport { SigninComponent } from './signin/signin.component';\n\nexport const AuthRoutes: Routes = [\n  { path: 'signin', component: SigninComponent },\n  { path: 'forgot-password', component: ForgotComponent },\n  { path: 'reset-password', component: ResetComponent },\n  { path: 'lockscreen', component: LockScreenComponent },\n];\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { AuthRoutes } from './authentication-routing.module';\n\nimport { CoreModule } from '../core.module';\nimport { ForgotComponent } from './forgot/forgot.component';\nimport { SigninComponent } from './signin/signin.component';\nimport { ResetComponent } from './reset/reset.component';\n@NgModule({\n  declarations: [SigninComponent, ForgotComponent, ResetComponent],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(AuthRoutes),\n    FormsModule,\n    ReactiveFormsModule,\n    CoreModule,\n  ],\n})\nexport class AuthenticationModule { }\n","<div class=\"container\">\n  <div class=\"row justify-content-center\">\n    <div class=\"col-12 col-md-5 col-xl-4 my-5\">\n      <h1 class=\"display-4 text-center mb-3\">\n        Password reset\n      </h1>\n      <p class=\"text-muted text-center mb-5\">\n        Enter your email to get a password reset link.\n      </p>\n      <div *ngIf=\"error\">{{errorMessage}}</div>\n      <form class=\"authentication__form\" [formGroup]=\"forgotPasswordForm\" (ngSubmit)=\"forgotPassword()\">\n        <div class=\"form-group\">\n          <label for=\"signin-email\">Email Address</label>\n          <input aria-label=\"Email sign in\" id=\"signin-email\" type=\"email\" name=\"email\" class=\"form-control\"\n            formControlName=\"email\" placeholder=\"name@address.com\"\n            [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\" />\n          <div *ngIf=\"submitted && f.email.errors\" class=\"form-invalid-feedback\"\n            [ngClass]=\"{'form.is-invalid': submitted && f.email.errors}\">\n            <div *ngIf=\"f.email.errors.required\">Email address is required</div>\n            <div *ngIf=\"f.email.errors.pattern || f.email.errors.email\">Enter a valid email</div>\n          </div>\n        </div>\n        <button [attr.disabled]=\"loading ? true: null\" type=\"submit\" class=\"btn btn-lg btn-block btn-primary mb-3 lift\">\n          <span class=\"spark-text has--loading\" [ngClass]=\"{'has--loading': loading}\">\n            {{ loading ? 'Loading' : 'Get Instructions' }}\n          </span>\n        </button>\n      </form>\n      <div class=\"forgot__remember-me-link\">\n        <p class=\"text-center\">Remembered your login?\n          <a [routerLink]=\"['/signin']\"> Sign In </a>\n        </p>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService } from 'src/app/services';\n\n@Component({\n  selector: 'app-forgot',\n  templateUrl: './forgot.component.html',\n  styleUrls: ['./forgot.component.scss']\n})\nexport class ForgotComponent implements OnInit {\n  public forgotPasswordForm!: FormGroup;\n  public submitted: boolean = false;\n  public loading: boolean = false;\n  public error: boolean = false;\n  public errorMessage!: string;\n\n  constructor(\n    private _authService: AuthService,\n    private formBuilder: FormBuilder\n  ) { }\n\n  ngOnInit(): void {\n    this.forgotPasswordForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email, Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$')]],\n    })\n\n  }\n\n  get f() {\n    console.log(this.forgotPasswordForm.controls);\n    return this.forgotPasswordForm.controls;\n  }\n\n  forgotPassword() {\n    this.error = false;\n    this.submitted = true;\n    this.loading = true;\n\n    if (this.forgotPasswordForm.invalid) {\n      this.loading = false;\n      return;\n    }\n\n\n    this._authService.forgotPassword(this.forgotPasswordForm.value).subscribe((res) => {\n      if (res) {\n        this.loading = false;\n        this.submitted = false;\n      }\n\n      if (res.detail === 'Failed to send email.') {\n        this.error = true;\n        this.errorMessage = res.detail;\n        return;\n      }\n\n      this.forgotPasswordForm.reset();\n\n    }, error => {\n\n      this.error = true;\n      this.loading = false;\n      this.submitted = false;\n      console.log('THERE IS AN ERROR', error);\n      if (error.detail) {\n        this.errorMessage = error.detail;\n      }\n    })\n  }\n\n  resetPassword() {\n\n  }\n\n}\n","<div class=\"container\">\n  <div class=\"row justify-content-center\">\n    <div class=\"col-12 col-md-5 col-xl-4 my-5\">\n      <h1 class=\"display-4 text-center mb-3\">\n        Reset Password\n      </h1>\n      <p class=\"text-muted text-center mb-5\"></p>\n\n      <div *ngIf=\"error\">{{errorMessage}}</div>\n      <form class=\"authentication__form\" [formGroup]=\"resetPasswordForm\" (ngSubmit)=\"resetPassword()\">\n        <div class=\"form-group\">\n          <div class=\"form__password\">\n            <label class=\"form-label\" for=\"password\">Password</label>\n            <input aria_label=\"password\" id=\"password\" formControlName=\"password\" type={{passwordType}}\n              class=\"form-control form-control-appended\" placeholder=\"Enter your password\" />\n            <div *ngIf=\"submitted && f.password.errors\" class=\"form-invalid-feedback\">\n              <div *ngIf=\"f.password.errors.required\">Password is required</div>\n              <div *ngIf=\"f.password.errors.minlength\">Password must be at least 8 characters</div>\n              <div *ngIf=\"f.password.hasError('hasNumber')\">Password must have at least 1 number</div>\n              <div *ngIf=\"f.password.hasError('hasCapitalCase')\">Password must have at least 1 capital case</div>\n              <div *ngIf=\"f.password.hasError('hasSmallCase')\">Password must have at least 1 small case</div>\n              <div *ngIf=\"f.password.hasError('hasSpecialCharacters')\">Password must have at least 1 special character\n              </div>\n            </div>\n            <div (click)=\"toggleShowPassword()\" class=\"form-control-icon password\"\n              [ngClass]=\"{'is--hidden': submitted && f.password.errors}\">\n              <span class=\"\">\n                <i class=\"fa fa-eye\" *ngIf=\"togglePasswordShow\"></i>\n                <i class=\"fa fa-eye-slash\" *ngIf=\"!togglePasswordShow\"></i>\n              </span>\n            </div>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <div class=\"form__password\">\n            <label class=\"form-label\" for=\"confirm_password\">Confirm Password</label>\n            <input aria_label=\"confirm password\" id=\"confirm_password\" formControlName=\"confirm_password\"\n              type={{passwordType}} class=\"form-control form-control-appended\" placeholder=\"Enter your password\" />\n            <div (click)=\"toggleShowPassword()\" class=\"form-control-icon password\"\n              [ngClass]=\"{'is--hidden': submitted && f.password.errors}\">\n              <span class=\"\">\n                <i class=\"fa fa-eye\" *ngIf=\"togglePasswordShow\"></i>\n                <i class=\"fa fa-eye-slash\" *ngIf=\"!togglePasswordShow\"></i>\n              </span>\n            </div>\n          </div>\n          <div *ngIf=\"submitted && f.confirm_password.errors\" class=\"form-invalid-feedback\">\n            <div *ngIf=\"f.confirm_password.errors.required\">Password is required</div>\n            <div *ngIf=\"f.confirm_password.errors.required\">Password Mismatch</div>\n          </div>\n        </div>\n        <button [attr.disabled]=\"loading ? true: null\" type=\"submit\" class=\"btn btn-block btn-primary mb-3 lift\">\n          <span class=\"spark-text has--loading\" [ngClass]=\"{'has--loading': loading}\">\n            {{ loading ? 'Loading' : 'Reset Passowrd' }}\n          </span>\n        </button>\n      </form>\n    </div>\n  </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService } from 'src/app/services';\nimport { MustMatch } from '../../helpers/must-match';\nimport { PasswordValidator } from '../../helpers/password-validator';\n@Component({\n  selector: 'app-reset',\n  templateUrl: './reset.component.html',\n  styleUrls: ['./reset.component.scss']\n})\nexport class ResetComponent implements OnInit {\n  public resetPasswordForm!: FormGroup;\n  public submitted: boolean = false;\n  public loading: boolean = false;\n  public error: boolean = false;\n  public errorMessage!: string;\n  public passwordType: String = 'password';\n  public togglePasswordShow: Boolean = true;\n\n  constructor(\n    private _authService:AuthService,\n    private formBuilder: FormBuilder\n  ) { }\n\n  ngOnInit(): void {\n    this.resetPasswordForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email, Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$')]],\n      password: ['', \n        [\n          Validators.required, \n          PasswordValidator(/\\d/, {hasNumber: true} ),\n          PasswordValidator(/[A-Z]/, {hasCapitalCase: true} ),\n          PasswordValidator(/[a-z]/, {hasSmallCase: true} ),\n          PasswordValidator(/[-!$%^&*()_+|~=`{}\\[\\]:\\/;<>?,.@#]/, {hasSpecialCharacters: true} ),\n          Validators.minLength(8) \n        ]\n      ],\n      confirm_password: ['', Validators.required]\n    }, {\n      validator: [ \n        MustMatch('password', 'confirm_password')\n      ],\n    });\n  }\n\n\n  get f() { \n    console.log(this.resetPasswordForm.controls);\n    return this.resetPasswordForm.controls; \n  }\n\n  resetPassword() {\n    this.error = false;\n    this.submitted = true;\n    this.loading = true;\n\n    if (this.resetPasswordForm.invalid) {\n      this.loading = false;\n      return;\n    }\n\n     \n    this._authService.resetPassowrd(this.resetPasswordForm.value).subscribe((res) => {\n      if (res) {\n        this.loading = false;\n        this.submitted = false;\n      }\n\n      this.resetPasswordForm.reset();\n\n    }, error => {\n\n      this.error = true;\n      this.loading = false;\n      this.submitted = false;\n      console.log('THERE IS AN ERROR', error);\n      if (error.detail) {\n        this.errorMessage = error.detail;\n      }\n    })\n  }\n\n  toggleShowPassword() {\n    this.togglePasswordShow = !this.togglePasswordShow;\n    this.passwordType = this._authService.toggleShowPassword(this.passwordType);\n  }\n\n}\n","<div class=\"card p-4\" style=\"width: 450px;\">\n  \n  <div class=\"card-body\">\n    \n    <div class=\"col-12 d-flex justify-content-center\">\n      <img src=\"assets/img/logo/spark.png\" height=\"90px\">\n    </div>\n    \n    <h6 class=\"auth-mini-header mt-3\">LOGIN</h6>\n    <p class=\"mini-grey-text\">Login to access you account</p>\n    \n    <span *ngIf=\"hasError\" class=\"text-danger small\">{{error}}</span>\n    \n\n    <form class=\"authentication__form\" [formGroup]=\"signinForm\" (ngSubmit)=\"signIn()\">\n      \n      <!--Email Form Group -->\n      <div class=\"form-group\">\n        <!-- <label class=\"form-label\" for=\"signin-email\">Email Address</label> -->\n        <input aria-label=\"username\" id=\"signin-email\" type=\"text\" class=\"form-control\"\n          formControlName=\"username\" placeholder=\"Username\" />\n        \n         <!-- Errors --> \n        <div *ngIf=\"submitted && f.username.errors\" class=\"text-danger small\"\n          [ngClass]=\"{'form.is-invalid': submitted && f.username.errors}\">\n          <div *ngIf=\"f.username.errors.required\">Email address is required</div>\n          <div *ngIf=\"f.username.errors.pattern || f.username.errors.email\">Enter a valid email</div>\n        </div>\n\n      </div>\n      \n\n      <!--Password Form Group -->\n      <div class=\"form-group mt-4\"> \n\n        <input aria_label=\"password\" id=\"password\" formControlName=\"password\" type={{passwordType}}\n          class=\"form-control form-control-appended\" placeholder=\"Password\" />\n\n        <div *ngIf=\"submitted && f.password.errors\" class=\"text-danger small\"\n          [ngClass]=\"{'form.is-invalid': submitted && f.password.errors}\">\n          <div *ngIf=\"f.password.errors.required\">Password is required</div>\n        </div>\n\n        <!-- Errors -->\n        <div (click)=\"toggleShowPassword()\" class=\"form-control-icon password\"\n          [ngClass]=\"{'is--hidden': submitted && f.password.errors}\">\n          <span class=\"\">\n            <i class=\"fa fa-eye\" *ngIf=\"togglePasswordShow\"></i>\n            <i class=\"fa fa-eye-slash\" *ngIf=\"!togglePasswordShow\"></i>\n          </span>\n        </div>\n\n      </div>\n\n      <!-- Remember me-->\n      <div class=\"form-group form-check\">\n        <input aria_label=\"Remember me\" type=\"checkbox\" formControlName=\"remember_me\" id=\"rememberMe\"\n          class=\"form-check-input\" />\n        <label class=\"form-label\" for=\"rememberMe\" class=\"mini-grey-text\">Remember Me</label>\n      </div>\n      \n      <!--Forgot Password -->\n      <div class=\"row justify-content-end\" >\n        <a [routerLink]=\"['/forgot-password']\" class=\"form-text form-link forgot small\"> Forgot password? </a>\n      </div>\n\n      <!--Login Button-->\n      <div class=\"row justify-content-end mt-4\">\n        <button [attr.disabled]=\"loading ? true: null\" type=\"submit\" class=\"btn btn btn-primary mb-3 lift\" style=\"width: 120px;\">\n          <span class=\"spark-text has--loading\" [ngClass]=\"{'has--loading': loading}\">\n            {{ loading ? 'Signing In' : 'Login' }}\n          </span>\n        </button>\n      </div>\n\n\n      \n    </form>\n\n\n  </div>\n\n</div>","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { catchError, take } from 'rxjs/operators';\n\nimport { AuthService, StorageService } from '../../../services'\n@Component({\n  selector: 'app-signin',\n  templateUrl: './signin.component.html',\n  styleUrls: ['./signin.component.scss']\n})\nexport class SigninComponent implements OnInit {\n  public signinForm!: FormGroup;\n\n  public submitted: Boolean = false;\n  public loading: Boolean = false;\n  public passwordType: String = 'password';\n  public togglePasswordShow: Boolean = true;\n  public hasError: Boolean = false;\n  public error: String = '';\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private _route: Router,\n    private _authService: AuthService,\n    private _storageService: StorageService\n  ) { }\n\n  ngOnInit(): void {\n    this.signinForm = this.formBuilder.group({\n      username: ['', Validators.required, ],\n    password: ['', Validators.required],\n      remember_me: [],\n    });\n  }\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.signinForm.controls;\n  }\n  signIn() {\n    this.submitted = true;\n    this.hasError = false;\n    this.error = '';\n\n    if (this.signinForm.invalid) {\n      return;\n    }\n\n    this.loading = true;\n    this._authService.signIn(this.signinForm.value)\n    .pipe(take(1))\n    .subscribe(\n      () => {\n        this.loading = false;\n        this.submitted = false;\n      },\n      (error) => {\n\n        this.loading = false;\n        this.submitted = false;\n        this.hasError = true;\n          \n        try{\n          this.error = error.error.non_field_errors[0];\n        }catch( e : any){\n           this.error = 'Oops! You caught us doing some house keeping. Try again after a few minutes. Kindly contact your administrator if issue persists!';\n        }\n      \n      }\n    );\n  }\n\n  toggleShowPassword() {\n    this.togglePasswordShow = !this.togglePasswordShow;\n    this.passwordType = this._authService.toggleShowPassword(this.passwordType);\n  }\n\n}\n","import { FormGroup } from '@angular/forms';\n\nexport function MustMatch( controlName: string, matchingControlName: string ) {\n    return(formGroup: FormGroup) => {\n        const control = formGroup.controls[controlName];\n        const matchingControl = formGroup.controls[matchingControlName];\n\n        if ( matchingControl.errors && !matchingControl.errors.mustMatch ) {\n            //if there's another validator with which found an error\n            return;\n        }\n\n        if ( control.value !== matchingControl.value ) {\n            matchingControl.setErrors({ mustMatch: true});\n        } else {\n            matchingControl.setErrors(null);\n        }\n    }\n}","import { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';\n\nexport function PasswordValidator(regex: RegExp, error: ValidationErrors): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } => {\n        if (!control.value) {\n            //if control is empty return no error\n            return null!;\n        }\n\n        //check the value of the control agains regex supplied\n        const valid = regex.test(control.value);\n\n        return valid ? null! : error!;\n    }\n}\n"]}