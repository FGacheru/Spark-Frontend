{"version":3,"mappings":"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","names":["AdministrationRepairRoutes","path","data","breadcrumb","component","_spare_part_type_spare_part_type_component__WEBPACK_IMPORTED_MODULE_0__","RepairModule","_angular_common__WEBPACK_IMPORTED_MODULE_4__","_angular_router__WEBPACK_IMPORTED_MODULE_5__","_reapir_routing_module__WEBPACK_IMPORTED_MODULE_1__","_angular_forms__WEBPACK_IMPORTED_MODULE_6__","src_app_shared_shared_module__WEBPACK_IMPORTED_MODULE_2__","declarations","imports","_angular_core__WEBPACK_IMPORTED_MODULE_6__","SparePartTypeComponent","_formService","_modalService","_toastService","_modal","title","field","add_spare_type_form","_angular_forms__WEBPACK_IMPORTED_MODULE_7__","part_code","supplier","description","comment","re_order_level","getDropdownValues","subscribe","supplier_loading","suppliers","response","results","table","getTableData","invalid","console","log","errors","value","url","formData","postForm","cancel","showToast","tableAction","emit","err","open","close","selectors","viewQuery","src_app_shared_tables_basic_table_basic_table_component__WEBPACK_IMPORTED_MODULE_0__","ctx"],"sources":["webpack:///src/app/modules/administration/repair/reapir-routing.module.ts","webpack:///src/app/modules/administration/repair/repair.module.ts","webpack:///src/app/modules/administration/repair/spare-part-type/spare-part-type.component.html","webpack:///src/app/modules/administration/repair/spare-part-type/spare-part-type.component.ts"],"sourcesContent":["import { Routes } from \"@angular/router\";\nimport { SparePartTypeComponent } from \"./spare-part-type/spare-part-type.component\";\n\nexport const AdministrationRepairRoutes : Routes = [\n    {\n        path: 'spare-part-types',\n        data : { breadcrumb : 'Spare Parts'},\n        component : SparePartTypeComponent\n    },\n];","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SparePartTypeComponent } from './spare-part-type/spare-part-type.component';\nimport { RouterModule } from '@angular/router';\nimport { AdministrationRepairRoutes } from './reapir-routing.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { SharedModule } from 'src/app/shared/shared.module';\n\n\n\n@NgModule({\n  declarations: [\n    SparePartTypeComponent\n  ],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(AdministrationRepairRoutes),\n    ReactiveFormsModule,\n    FormsModule,\n    SharedModule\n  ]\n})\nexport class RepairModule { }\n","<!-- Top Section -->\n<div class=\"row justify-content-between mb-2 pl-4\">\n    <p class=\"mb-2\"> SPARE PART TYPE </p>\n\n    <div>\n        <app-default-button  text=\"Add New\" class=\"mr-4\" (action)=\"openAdd()\" ></app-default-button>\n    </div>\n</div>\n\n<!--Table-->\n<app-basic-table [titles]=\"titles\" [url]=\"url\" [data]=\"data\"  ></app-basic-table>\n\n\n<!-- Add Item Type Modal -->\n<jw-modal id=\"add-spare-part\" (tableAction)=\"reloadTable()\" width=\"30%\">\n\n    <p class=\"mb-2\">ADD SPARE PART TYPE</p>\n \n    <form [formGroup]=\"add_spare_type_form\" (ngSubmit)=\"onSubmitAdd()\" >\n        \n        <!--Item Type Name-->\n        <div>\n            <small>PART CODE</small>\n            <input class=\"mt-2 form-control form-control-sm opt-value\" formControlName=\"part_code\" />\n\n            <!-- Errors -->\n            <div\n                *ngIf=\"add_spare_type_form.controls['part_code'].invalid && (add_spare_type_form.controls['part_code'].dirty \n                || add_spare_type_form.controls['part_code'].touched)\"\n                class=\"alert\">\n                <div *ngIf=\"add_spare_type_form.controls['part_code'].errors.required\">\n                <span class=\"text-danger opt-value\">\n                    Field is required <br>\n                </span>\n                </div>\n            </div>\n\n            <div *ngIf=\"api_errors.part_code\">\n                <span class=\"text-danger opt-value\">\n                {{api_errors.part_code}}\n                </span>\n            </div>\n        </div>\n\n        <!-- Supplier -->\n        <div class=\"mt-2\">\n            <small>SUPPLIER NAME</small>\n\n            <select class=\"mt-2 form-control form-control-sm opt-value\" formControlName=\"supplier\" *ngIf=\"!supplier_loading\">\n                <option *ngFor=\"let supplier of suppliers\" value=\"{{supplier.id}}\" required>{{supplier.name}}</option>\n            </select>\n\n            <!-- Loader -->\n            <span class=\"linear-background\" *ngIf=\"supplier_loading\"></span>\n\n            <!-- Errors -->\n            <div\n                *ngIf=\"add_spare_type_form.controls['supplier'].invalid && (add_spare_type_form.controls['supplier'].dirty \n                || add_spare_type_form.controls['supplier'].touched)\"\n                class=\"alert\">\n                <div *ngIf=\"add_spare_type_form.controls['supplier'].errors.required\">\n                <span class=\"text-danger opt-value\">\n                    Field is required <br>\n                </span>\n                </div>\n            </div>\n\n            <div *ngIf=\"api_errors.supplier\">\n\n                <span class=\"text-danger opt-value\">\n                {{api_errors.supplier}}\n                </span>\n            </div>\n        </div>\n\n                <!-- Description-->\n                <div class=\"mt-2\">\n                    <small>PART DESCRIPTION</small>\n        \n                    <input class=\"mt-2 form-control form-control-sm opt-value\" formControlName=\"description\" />\n\n            \n                    <!-- Errors -->\n                    <div\n                        *ngIf=\"add_spare_type_form.controls['description'].invalid && (add_spare_type_form.controls['description'].dirty \n                        || add_spare_type_form.controls['description'].touched)\"\n                        class=\"alert\">\n                        <div *ngIf=\"add_spare_type_form.controls['description'].errors.required\">\n                        <span class=\"text-danger opt-value\">\n                            Field is required <br>\n                        </span>\n                        </div>\n                    </div>\n        \n                    <div *ngIf=\"api_errors.description\">\n        \n                        <span class=\"text-danger opt-value\">\n                        {{api_errors.description}}\n                        </span>\n                    </div>\n                </div>\n\n\n\n        <!---comment-->\n        <div class=\"mt-4\">\n            <small>COMMENT</small>\n\n            <textarea  cols=\"4\" rows=\"8\" class=\"mt-2 form-control form-control-sm opt-value\" type=\"comment\" formControlName=\"comment\" >\n            </textarea>\n\n            <!-- Errors -->\n            <div\n                *ngIf=\"add_spare_type_form.controls['comment'].invalid && (add_spare_type_form.controls['comment'].dirty \n                || add_spare_type_form.controls['comment'].touched)\"\n                class=\"alert\">\n                <div *ngIf=\"add_spare_type_form.controls['comment'].errors.required\">\n                <span class=\"text-danger opt-value\">\n                    Field is required <br>\n                </span>\n                </div>\n            </div>\n\n            <div *ngIf=\"api_errors.comment\">\n                <span class=\"text-danger opt-value\">\n                {{api_errors.comment}}\n                </span>\n            </div>\n        </div>\n\n              <!-- Re Order Level -->\n              <div class=\"mt-2\">\n                <small>Re ORDER LEVEl</small>\n    \n                <input class=\"mt-2 form-control form-control-sm opt-value\" type=\"number\" formControlName=\"re_order_level\" />\n\n    \n                <!-- Errors -->\n                <div\n                    *ngIf=\"add_spare_type_form.controls['re_order_level'].invalid && (add_spare_type_form.controls['re_order_level'].dirty \n                    || add_spare_type_form.controls['re_order_level'].touched)\"\n                    class=\"alert\">\n                    <div *ngIf=\"add_spare_type_form.controls['re_order_level'].errors.required\">\n                    <span class=\"text-danger opt-value\">\n                        Field is required <br>\n                    </span>\n                    </div>\n                </div>\n    \n                <div *ngIf=\"api_errors.re_order_level\">\n    \n                    <span class=\"text-danger opt-value\">\n                    {{api_errors.sre_order_level}}\n                    </span>\n                </div>\n            </div>\n\n         <!--Submit Button-->\n         <div class=\"row justify-content-end mt-4 pr-3\">\n            <app-default-button [outline]=\"true\" text=\"Cancel\" class=\"mr-4\"(action)=\"cancel()\" ></app-default-button>\n\n            <app-default-button text=\"Submit\" ></app-default-button>\n            \n         </div>\n\n    </form> \n\n</jw-modal>\n","import { Component, ViewChild, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { FormItemService } from 'src/app/services/forms/form-item.service';\nimport { ModalService } from 'src/app/services/modal/modal.service';\nimport { BasicTableComponent } from 'src/app/shared/tables/basic-table/basic-table.component';\nimport { ToastNotificationsService } from 'src/app/shared/toast-notifications/toast-notifications.service';\nimport { HttpErrorResponse } from '@angular/common/http';\n@Component({\n  selector: 'app-spare-part-type',\n  templateUrl: './spare-part-type.component.html',\n  styleUrls: ['./spare-part-type.component.scss']\n})\nexport class SparePartTypeComponent implements OnInit {\n  url : string = \"spareparts/\";\n  api_errors : any = [];\n\n  add_spare_type_form: FormGroup;\n\n  data : any[] = [];\n\n    @Output()\n  closeAction  : EventEmitter<any> = new EventEmitter();\n  \n  @Output()\n  tableAction  : EventEmitter<any> = new EventEmitter();\n\n  titles: any[] = [\n    {\n      title: 'PART CODE',\n      field : 'part_code'\n    },\n    {\n      title: 'SUPPLIER NAME',\n      field : 'supplier.name'\n    },\n    {\n      title: 'PART DESCRIPTION',\n      field : 'description'\n    },\n    {\n      title: 'COMMENT',\n      field : 'comment'\n    },\n    {\n      title: 'RE-ORDER LEVEL',\n      field : 're_order_level'\n    }\n  ];\n\n  suppliers : any[] = [];\n  \n  supplier_loading = true;\n\n  @ViewChild(BasicTableComponent)\n  table : BasicTableComponent;\n\n\n  constructor(private _formService : FormItemService,\n    private _modalService : ModalService,private _toastService : ToastNotificationsService,\n    private _modal : ModalService ) {\n        \n         this.add_spare_type_form = new FormGroup({\n            part_code : new FormControl('',Validators.required),\n            supplier :new FormControl('',Validators.required),\n            description : new FormControl('',Validators.required),\n            comment : new FormControl('',Validators.required),\n            re_order_level : new FormControl('',Validators.required) \n         });\n\n             //get suppliers\n    this._formService.getDropdownValues(`suppliers/`).subscribe(\n      response => {\n        this.supplier_loading = false;\n        this.suppliers = response.results;\n      },\n      err => {\n        this.supplier_loading = false;\n      }\n    );\n    }\n\n  ngOnInit(): void {\n\n  }\n\n  reloadTable(){\n    this.table.getTableData();\n  }\n\n  onSubmitAdd(){\n\n    if(this.add_spare_type_form.invalid){\n      console.log(this.add_spare_type_form.errors);\n    }\n    \n    console.log(this.add_spare_type_form.value);\n    let data : any = {\n     url : 'spareparts/',\n     formData : this.add_spare_type_form.value\n    };\n  \n   this._formService.postForm(true,data).subscribe(\n     response => {\n       this.cancel();\n       this._toastService.showToast(\"SPARE PART CREATED SUCCESSFULLY!\", \"success\");\n       this.tableAction.emit();\n     },\n     (err: HttpErrorResponse) => {\n       this._toastService.showToast(\"An Error Ocurred\", \"danger\");\n     }\n     );\n\n  }\n\n  openAdd(){\n    this._modalService.open('add-spare-part');\n  }\n\n  cancel(){\n    this._modalService.close('add-spare-part');\n  }  \n\n}\n"]}